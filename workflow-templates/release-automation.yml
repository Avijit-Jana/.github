name: Release Automation

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on version tags like v1.0.0
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

permissions:
  contents: write
  packages: write

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        run: |
          # Simple changelog generation - customize as needed
          # You might want to use a tool like conventional-changelog
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          echo "## What's Changed" >> $GITHUB_OUTPUT
          git log --pretty=format:"* %s (%h)" $(git describe --tags --abbrev=0 HEAD~1)..HEAD >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name || github.event.inputs.version }}
          release_name: Release ${{ github.ref_name || github.event.inputs.version }}
          body: ${{ steps.changelog.outputs.CHANGELOG }}
          draft: false
          prerelease: ${{ contains(github.ref_name || github.event.inputs.version, '-') }}

  build-and-upload:
    name: Build and Upload Assets
    runs-on: ubuntu-latest
    needs: create-release
    strategy:
      matrix:
        # Customize this matrix based on your build targets
        include:
          - os: ubuntu-latest
            arch: amd64
            name: linux-amd64
          - os: ubuntu-latest  
            arch: arm64
            name: linux-arm64
          # Add more targets as needed:
          # - os: windows-latest
          #   arch: amd64
          #   name: windows-amd64
          # - os: macos-latest
          #   arch: amd64
          #   name: darwin-amd64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup build environment
        run: |
          # Add your build environment setup here
          # Example for Go:
          # go version
          # Example for Node.js:
          # node --version
          # npm --version
          echo "Setting up build environment for ${{ matrix.name }}"

      - name: Build release binary
        run: |
          # Add your build commands here
          # Example for Go:
          # GOOS=linux GOARCH=${{ matrix.arch }} go build -o myapp-${{ matrix.name }} ./cmd/myapp
          # Example for Node.js:
          # npm ci
          # npm run build
          # zip -r myapp-${{ matrix.name }}.zip dist/
          echo "Building for ${{ matrix.name }}"
          # Create a dummy binary for demonstration
          echo "This is a release binary for ${{ matrix.name }}" > myapp-${{ matrix.name }}

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./myapp-${{ matrix.name }}
          asset_name: myapp-${{ matrix.name }}
          asset_content_type: application/octet-stream

  # Optional: Build and push Docker image
  docker-build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: create-release
    if: github.repository_owner != '' # Only run if you want Docker builds
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  # Optional: Publish to package registries
  publish-packages:
    name: Publish Packages
    runs-on: ubuntu-latest
    needs: create-release
    if: false # Set to true if you want to enable package publishing
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js (if publishing npm packages)
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'

      - name: Publish to npm
        run: |
          # npm ci
          # npm publish
          echo "Publishing to npm..."
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [create-release, build-and-upload]
    if: always()
    steps:
      - name: Notify success
        if: needs.create-release.result == 'success' && needs.build-and-upload.result == 'success'
        run: |
          echo "üéâ Release ${{ github.ref_name || github.event.inputs.version }} created successfully!"
          # Add notification logic here (Slack, Discord, email, etc.)

      - name: Notify failure
        if: needs.create-release.result == 'failure' || needs.build-and-upload.result == 'failure'
        run: |
          echo "‚ùå Release ${{ github.ref_name || github.event.inputs.version }} failed!"
          # Add failure notification logic here
